{"ast":null,"code":"var _jsxFileName = \"/home/jhmg/invitation-park/src/pages/Gallery/Album/AlbumModal.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable jsx-a11y/img-redundant-alt */\nimport { useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport Modal from \"react-modal\";\nimport styled from \"@emotion/styled\";\nimport { ClearButton } from \"@/atoms\";\nimport { AlbumSlider } from \"./AlbumSlider\";\nimport { modalState } from \"./MoreButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst test = [\"/main.png\", \"/test169.jpeg\", \"/test916.png\"];\nexport const AlbumModal = () => {\n  _s();\n\n  const customStyles = {\n    overlay: {\n      backgroundColor: \"#00000080\"\n    },\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      padding: 0,\n      transform: \"translate(-50%, -50%)\",\n      width: \"85vw\",\n      maxHeight: \"80vh\",\n      border: 0,\n      borderRadius: 0\n    }\n  };\n  const [isOpen, setIsOpen] = useRecoilState(modalState);\n  const [selectedIdx, setselectedIdx] = useState();\n  const isSelected = selectedIdx !== undefined;\n\n  const selectPhoto = idx => () => setselectedIdx(idx);\n\n  const resetPhoto = () => setselectedIdx(undefined);\n\n  const closeModal = () => {\n    if (isSelected) {\n      resetPhoto();\n    } else {\n      setIsOpen(false);\n      setTimeout(() => resetPhoto(), 200);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onRequestClose: closeModal,\n    closeTimeoutMS: 200,\n    style: customStyles,\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      isHide: isSelected,\n      children: Array.from({\n        length: 20\n      }, (x, i) => i).map(idx => /*#__PURE__*/_jsxDEV(Button, {\n        onClick: selectPhoto(idx),\n        src: test[idx % 3]\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlbumSlider, {\n      selected: selectedIdx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AlbumModal, \"mM5uETXC5nNGWQIgtRTcU16qBJI=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = AlbumModal;\nconst List = styled.div`\n  display: ${_ref => {\n  let {\n    isHide\n  } = _ref;\n  return isHide ? \"none\" : \"grid\";\n}};\n  grid-template-columns: repeat(auto-fill, minmax(30%, auto));\n  gap: 5px;\n  padding: 20px;\n`;\n_c2 = List;\nconst Button = styled(ClearButton)`\n  position: relative;\n  padding-bottom: 100%;\n  background-image: url(${_ref2 => {\n  let {\n    src\n  } = _ref2;\n  return src;\n}});\n  background-size: cover;\n  background-position: center;\n`;\n_c3 = Button;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AlbumModal\");\n$RefreshReg$(_c2, \"List\");\n$RefreshReg$(_c3, \"Button\");","map":{"version":3,"names":["useState","useRecoilState","Modal","styled","ClearButton","AlbumSlider","modalState","setAppElement","test","AlbumModal","customStyles","overlay","backgroundColor","content","top","left","right","bottom","marginRight","padding","transform","width","maxHeight","border","borderRadius","isOpen","setIsOpen","selectedIdx","setselectedIdx","isSelected","undefined","selectPhoto","idx","resetPhoto","closeModal","setTimeout","Array","from","length","x","i","map","List","div","isHide","Button","src"],"sources":["/home/jhmg/invitation-park/src/pages/Gallery/Album/AlbumModal.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/img-redundant-alt */\nimport { useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport Modal from \"react-modal\";\nimport styled from \"@emotion/styled\";\n\nimport { ClearButton } from \"@/atoms\";\n\nimport { AlbumSlider } from \"./AlbumSlider\";\nimport { modalState } from \"./MoreButton\";\n\nModal.setAppElement(\"#root\");\n\nconst test = [\"/main.png\", \"/test169.jpeg\", \"/test916.png\"];\n\nexport const AlbumModal: React.FC = () => {\n  const customStyles = {\n    overlay: {\n      backgroundColor: \"#00000080\",\n    },\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      padding: 0,\n      transform: \"translate(-50%, -50%)\",\n      width: \"85vw\",\n      maxHeight: \"80vh\",\n      border: 0,\n      borderRadius: 0,\n    },\n  };\n\n  const [isOpen, setIsOpen] = useRecoilState(modalState);\n  const [selectedIdx, setselectedIdx] = useState<undefined | number>();\n  const isSelected = selectedIdx !== undefined;\n\n  const selectPhoto = (idx: number) => () => setselectedIdx(idx);\n  const resetPhoto = () => setselectedIdx(undefined);\n  const closeModal = () => {\n    if (isSelected) {\n      resetPhoto();\n    } else {\n      setIsOpen(false);\n      setTimeout(() => resetPhoto(), 200);\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={closeModal}\n      closeTimeoutMS={200}\n      style={customStyles}\n    >\n      <List isHide={isSelected}>\n        {Array.from({ length: 20 }, (x, i) => i).map((idx) => (\n          <Button key={idx} onClick={selectPhoto(idx)} src={test[idx % 3]} />\n        ))}\n      </List>\n      <AlbumSlider selected={selectedIdx} />\n    </Modal>\n  );\n};\n\nconst List = styled.div<{ isHide: boolean }>`\n  display: ${({ isHide }) => (isHide ? \"none\" : \"grid\")};\n  grid-template-columns: repeat(auto-fill, minmax(30%, auto));\n  gap: 5px;\n  padding: 20px;\n`;\n\nconst Button = styled(ClearButton)<{ src: string }>`\n  position: relative;\n  padding-bottom: 100%;\n  background-image: url(${({ src }) => src});\n  background-size: cover;\n  background-position: center;\n`;\n"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,WAAT,QAA4B,SAA5B;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEAJ,KAAK,CAACK,aAAN,CAAoB,OAApB;AAEA,MAAMC,IAAI,GAAG,CAAC,WAAD,EAAc,eAAd,EAA+B,cAA/B,CAAb;AAEA,OAAO,MAAMC,UAAoB,GAAG,MAAM;EAAA;;EACxC,MAAMC,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,eAAe,EAAE;IADV,CADU;IAInBC,OAAO,EAAE;MACPC,GAAG,EAAE,KADE;MAEPC,IAAI,EAAE,KAFC;MAGPC,KAAK,EAAE,MAHA;MAIPC,MAAM,EAAE,MAJD;MAKPC,WAAW,EAAE,MALN;MAMPC,OAAO,EAAE,CANF;MAOPC,SAAS,EAAE,uBAPJ;MAQPC,KAAK,EAAE,MARA;MASPC,SAAS,EAAE,MATJ;MAUPC,MAAM,EAAE,CAVD;MAWPC,YAAY,EAAE;IAXP;EAJU,CAArB;EAmBA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBzB,cAAc,CAACK,UAAD,CAA1C;EACA,MAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgC5B,QAAQ,EAA9C;EACA,MAAM6B,UAAU,GAAGF,WAAW,KAAKG,SAAnC;;EAEA,MAAMC,WAAW,GAAIC,GAAD,IAAiB,MAAMJ,cAAc,CAACI,GAAD,CAAzD;;EACA,MAAMC,UAAU,GAAG,MAAML,cAAc,CAACE,SAAD,CAAvC;;EACA,MAAMI,UAAU,GAAG,MAAM;IACvB,IAAIL,UAAJ,EAAgB;MACdI,UAAU;IACX,CAFD,MAEO;MACLP,SAAS,CAAC,KAAD,CAAT;MACAS,UAAU,CAAC,MAAMF,UAAU,EAAjB,EAAqB,GAArB,CAAV;IACD;EACF,CAPD;;EASA,oBACE,QAAC,KAAD;IACE,MAAM,EAAER,MADV;IAEE,cAAc,EAAES,UAFlB;IAGE,cAAc,EAAE,GAHlB;IAIE,KAAK,EAAExB,YAJT;IAAA,wBAME,QAAC,IAAD;MAAM,MAAM,EAAEmB,UAAd;MAAA,UACGO,KAAK,CAACC,IAAN,CAAW;QAAEC,MAAM,EAAE;MAAV,CAAX,EAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAArC,EAAwCC,GAAxC,CAA6CT,GAAD,iBAC3C,QAAC,MAAD;QAAkB,OAAO,EAAED,WAAW,CAACC,GAAD,CAAtC;QAA6C,GAAG,EAAExB,IAAI,CAACwB,GAAG,GAAG,CAAP;MAAtD,GAAaA,GAAb;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QANF,eAWE,QAAC,WAAD;MAAa,QAAQ,EAAEL;IAAvB;MAAA;MAAA;MAAA;IAAA,QAXF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAlDM;;GAAMlB,U;UAoBiBR,c;;;KApBjBQ,U;AAoDb,MAAMiC,IAAI,GAAGvC,MAAM,CAACwC,GAAyB;AAC7C,aAAa;EAAA,IAAC;IAAEC;EAAF,CAAD;EAAA,OAAiBA,MAAM,GAAG,MAAH,GAAY,MAAnC;AAAA,CAA2C;AACxD;AACA;AACA;AACA,CALA;MAAMF,I;AAON,MAAMG,MAAM,GAAG1C,MAAM,CAACC,WAAD,CAA+B;AACpD;AACA;AACA,0BAA0B;EAAA,IAAC;IAAE0C;EAAF,CAAD;EAAA,OAAaA,GAAb;AAAA,CAAiB;AAC3C;AACA;AACA,CANA;MAAMD,M"},"metadata":{},"sourceType":"module"}